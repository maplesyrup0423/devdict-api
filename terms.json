[
  {
    "id": 1,
    "term": "API",
    "category": "backend",
    "description": "API(Application Programming Interface)는 서로 다른 소프트웨어나 시스템이 상호작용할 수 있도록 도와주는 인터페이스다. 이를 통해 외부 프로그램이 기능을 호출하거나 데이터를 주고받을 수 있다."
  },
  {
    "id": 2,
    "term": "REST",
    "category": "backend",
    "description": "REST(Representational State Transfer)는 웹에서 자원을 관리하기 위한 아키텍처 스타일이다. 자원을 URI로 식별하고 HTTP 메서드를 사용해 CRUD 작업을 수행한다."
  },
  {
    "id": 3,
    "term": "JSON",
    "category": "backend",
    "description": "JSON(JavaScript Object Notation)은 경량 데이터 교환 형식으로, 사람이 읽기 쉽고 기계가 파싱하기 쉬운 구조를 가진다. API 응답 형식으로 널리 사용된다."
  },
  {
    "id": 4,
    "term": "DOM",
    "category": "frontend",
    "description": "DOM(Document Object Model)은 HTML이나 XML 문서를 객체 트리 구조로 표현한 것이다. 자바스크립트를 통해 DOM을 조작하면 웹페이지의 구조, 내용, 스타일을 동적으로 변경할 수 있다."
  },
  {
    "id": 5,
    "term": "CSS",
    "category": "frontend",
    "description": "CSS(Cascading Style Sheets)는 HTML 요소의 스타일과 레이아웃을 정의하는 언어이다. 색상, 폰트, 배치 등을 지정하여 웹 페이지의 시각적 표현을 제어한다."
  },
  {
    "id": 6,
    "term": "SQL",
    "category": "database",
    "description": "SQL(Structured Query Language)은 관계형 데이터베이스에서 데이터를 생성, 조회, 수정, 삭제하는 데 사용되는 표준 언어이다. SELECT, INSERT, UPDATE, DELETE 등의 명령어를 사용한다."
  },
  {
    "id": 7,
    "term": "NoSQL",
    "category": "database",
    "description": "NoSQL은 전통적인 관계형 데이터베이스 구조를 사용하지 않는 데이터베이스를 의미한다. 문서, 키-값, 그래프, 컬럼 지향 등 다양한 형태가 있으며 확장성과 유연성이 높다."
  },
  {
    "id": 8,
    "term": "Git",
    "category": "tools",
    "description": "Git은 분산 버전 관리 시스템으로, 소스 코드의 변경 이력을 추적하고 협업을 용이하게 한다. 브랜치와 머지 기능을 통해 여러 개발자가 동시에 작업할 수 있다."
  },
  {
    "id": 9,
    "term": "CI/CD",
    "category": "devops",
    "description": "CI/CD(Continuous Integration / Continuous Deployment)는 코드 변경 사항을 자동으로 테스트하고 배포하는 개발 프로세스다. 빠른 피드백과 안정적인 배포를 가능하게 한다."
  },
  {
    "id": 10,
    "term": "Container",
    "category": "devops",
    "description": "컨테이너는 애플리케이션과 그 실행 환경을 패키징하여 어디서나 동일하게 동작하도록 만든 기술이다. Docker가 대표적인 컨테이너 도구이며, 배포 자동화에 자주 사용된다."
  },
  {
    "id": 11,
    "term": "Docker",
    "category": "devops",
    "description": "Docker는 컨테이너를 쉽게 만들고 관리할 수 있는 플랫폼이다. 개발 환경을 손쉽게 복제하고, 운영 서버에 일관된 환경을 제공한다."
  },
  {
    "id": 12,
    "term": "Microservice",
    "category": "architecture",
    "description": "마이크로서비스는 애플리케이션을 독립적인 작은 서비스 단위로 나누어 개발하고 배포하는 아키텍처이다. 각 서비스는 독립적으로 배포되고 확장될 수 있다."
  },
  {
    "id": 13,
    "term": "Framework",
    "category": "general",
    "description": "프레임워크는 애플리케이션 개발에서 공통적으로 사용되는 구조와 기능을 미리 구현해둔 뼈대이다. 개발자는 이를 기반으로 비즈니스 로직 구현에 집중할 수 있다."
  },
  {
    "id": 14,
    "term": "Library",
    "category": "general",
    "description": "라이브러리는 특정 기능을 수행하는 코드 집합이다. 프레임워크와 달리 호출 흐름을 개발자가 제어하며 필요한 기능만 선택적으로 사용할 수 있다."
  },
  {
    "id": 15,
    "term": "Middleware",
    "category": "backend",
    "description": "미들웨어는 애플리케이션과 운영체제 또는 데이터베이스, 네트워크 사이에서 중개 역할을 하는 소프트웨어다. 요청/응답 처리나 로깅, 인증 기능 등을 제공한다."
  },
  {
    "id": 16,
    "term": "Load Balancer",
    "category": "network",
    "description": "로드 밸런서는 여러 서버에 트래픽을 분산시켜 서버 과부하를 방지하고 가용성을 높이는 장치 또는 소프트웨어다. 대규모 트래픽 처리에서 필수 요소다."
  },
  {
    "id": 17,
    "term": "OAuth",
    "category": "security",
    "description": "OAuth는 사용자의 비밀번호를 직접 노출하지 않고 외부 애플리케이션이 인증·인가를 받을 수 있도록 해주는 표준 프로토콜이다. 소셜 로그인에서 자주 사용된다."
  },
  {
    "id": 18,
    "term": "JWT",
    "category": "security",
    "description": "JWT(JSON Web Token)는 인증 정보를 JSON 형태로 암호화하여 전송하는 토큰 방식이다. 무상태(stateless) 인증에 자주 사용된다."
  },
  {
    "id": 19,
    "term": "Cache",
    "category": "network",
    "description": "캐시는 자주 사용하는 데이터를 임시로 저장하여 접근 속도를 높이는 기술이다. 메모리, 브라우저, 서버 등 다양한 수준에서 사용된다."
  },
  {
    "id": 20,
    "term": "GraphQL",
    "category": "backend",
    "description": "GraphQL은 클라이언트가 원하는 데이터만 정확히 요청하고 받을 수 있는 쿼리 언어이자 런타임이다. REST보다 유연한 데이터 요청이 가능하다."
  }
]
