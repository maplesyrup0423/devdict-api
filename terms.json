[
  {
    "id": 1,
    "term": "API",
    "category": "backend",
    "description": "API(Application Programming Interface)는 서로 다른 소프트웨어나 시스템이 상호작용할 수 있도록 도와주는 인터페이스다. 이를 통해 외부 프로그램이 기능을 호출하거나 데이터를 주고받을 수 있다."
  },
  {
    "id": 2,
    "term": "REST",
    "category": "backend",
    "description": "REST(Representational State Transfer)는 웹에서 자원을 관리하기 위한 아키텍처 스타일이다. 자원을 URI로 식별하고 HTTP 메서드를 사용해 CRUD 작업을 수행한다."
  },
  {
    "id": 3,
    "term": "JSON",
    "category": "backend",
    "description": "JSON(JavaScript Object Notation)은 경량 데이터 교환 형식으로, 사람이 읽기 쉽고 기계가 파싱하기 쉬운 구조를 가진다. API 응답 형식으로 널리 사용된다."
  },
  {
    "id": 4,
    "term": "DOM",
    "category": "frontend",
    "description": "DOM(Document Object Model)은 HTML이나 XML 문서를 객체 트리 구조로 표현한 것이다. 자바스크립트를 통해 DOM을 조작하면 웹페이지의 구조, 내용, 스타일을 동적으로 변경할 수 있다."
  },
  {
    "id": 5,
    "term": "CSS",
    "category": "frontend",
    "description": "CSS(Cascading Style Sheets)는 HTML 요소의 스타일과 레이아웃을 정의하는 언어이다. 색상, 폰트, 배치 등을 지정하여 웹 페이지의 시각적 표현을 제어한다."
  },
  {
    "id": 6,
    "term": "SQL",
    "category": "database",
    "description": "SQL(Structured Query Language)은 관계형 데이터베이스에서 데이터를 생성, 조회, 수정, 삭제하는 데 사용되는 표준 언어이다. SELECT, INSERT, UPDATE, DELETE 등의 명령어를 사용한다."
  },
  {
    "id": 7,
    "term": "NoSQL",
    "category": "database",
    "description": "NoSQL은 전통적인 관계형 데이터베이스 구조를 사용하지 않는 데이터베이스를 의미한다. 문서, 키-값, 그래프, 컬럼 지향 등 다양한 형태가 있으며 확장성과 유연성이 높다."
  },
  {
    "id": 8,
    "term": "Git",
    "category": "tools",
    "description": "Git은 분산 버전 관리 시스템으로, 소스 코드의 변경 이력을 추적하고 협업을 용이하게 한다. 브랜치와 머지 기능을 통해 여러 개발자가 동시에 작업할 수 있다."
  },
  {
    "id": 9,
    "term": "CI/CD",
    "category": "devops",
    "description": "CI/CD(Continuous Integration / Continuous Deployment)는 코드 변경 사항을 자동으로 테스트하고 배포하는 개발 프로세스다. 빠른 피드백과 안정적인 배포를 가능하게 한다."
  },
  {
    "id": 10,
    "term": "Container",
    "category": "devops",
    "description": "컨테이너는 애플리케이션과 그 실행 환경을 패키징하여 어디서나 동일하게 동작하도록 만든 기술이다. Docker가 대표적인 컨테이너 도구이며, 배포 자동화에 자주 사용된다."
  },
  {
    "id": 11,
    "term": "Docker",
    "category": "devops",
    "description": "Docker는 컨테이너를 쉽게 만들고 관리할 수 있는 플랫폼이다. 개발 환경을 손쉽게 복제하고, 운영 서버에 일관된 환경을 제공한다."
  },
  {
    "id": 12,
    "term": "Microservice",
    "category": "architecture",
    "description": "마이크로서비스는 애플리케이션을 독립적인 작은 서비스 단위로 나누어 개발하고 배포하는 아키텍처이다. 각 서비스는 독립적으로 배포되고 확장될 수 있다."
  },
  {
    "id": 13,
    "term": "Framework",
    "category": "general",
    "description": "프레임워크는 애플리케이션 개발에서 공통적으로 사용되는 구조와 기능을 미리 구현해둔 뼈대이다. 개발자는 이를 기반으로 비즈니스 로직 구현에 집중할 수 있다."
  },
  {
    "id": 14,
    "term": "Library",
    "category": "general",
    "description": "라이브러리는 특정 기능을 수행하는 코드 집합이다. 프레임워크와 달리 호출 흐름을 개발자가 제어하며 필요한 기능만 선택적으로 사용할 수 있다."
  },
  {
    "id": 15,
    "term": "Middleware",
    "category": "backend",
    "description": "미들웨어는 애플리케이션과 운영체제 또는 데이터베이스, 네트워크 사이에서 중개 역할을 하는 소프트웨어다. 요청/응답 처리나 로깅, 인증 기능 등을 제공한다."
  },
  {
    "id": 16,
    "term": "Load Balancer",
    "category": "network",
    "description": "로드 밸런서는 여러 서버에 트래픽을 분산시켜 서버 과부하를 방지하고 가용성을 높이는 장치 또는 소프트웨어다. 대규모 트래픽 처리에서 필수 요소다."
  },
  {
    "id": 17,
    "term": "OAuth",
    "category": "security",
    "description": "OAuth는 사용자의 비밀번호를 직접 노출하지 않고 외부 애플리케이션이 인증·인가를 받을 수 있도록 해주는 표준 프로토콜이다. 소셜 로그인에서 자주 사용된다."
  },
  {
    "id": 18,
    "term": "JWT",
    "category": "security",
    "description": "JWT(JSON Web Token)는 인증 정보를 JSON 형태로 암호화하여 전송하는 토큰 방식이다. 무상태(stateless) 인증에 자주 사용된다."
  },
  {
    "id": 19,
    "term": "Cache",
    "category": "network",
    "description": "캐시는 자주 사용하는 데이터를 임시로 저장하여 접근 속도를 높이는 기술이다. 메모리, 브라우저, 서버 등 다양한 수준에서 사용된다."
  },
  {
    "id": 20,
    "term": "GraphQL",
    "category": "backend",
    "description": "GraphQL은 클라이언트가 원하는 데이터만 정확히 요청하고 받을 수 있는 쿼리 언어이자 런타임이다. REST보다 유연한 데이터 요청이 가능하다."
  },
  {
    "id": 21,
    "term": "TypeScript",
    "category": "frontend",
    "description": "TypeScript는 JavaScript에 정적 타입을 추가한 언어이다. 타입 검사를 통해 오류를 사전에 방지하고, 코드 가독성과 유지보수성을 높일 수 있다."
  },
  {
    "id": 22,
    "term": "React",
    "category": "frontend",
    "description": "React는 UI를 구성하기 위한 자바스크립트 라이브러리로, 컴포넌트 기반 개발을 통해 재사용성과 유지보수성을 높인다."
  },
  {
    "id": 23,
    "term": "SPA",
    "category": "frontend",
    "description": "SPA(Single Page Application)는 하나의 HTML 페이지에서 동적으로 콘텐츠를 바꿔가며 동작하는 웹 애플리케이션이다. 페이지 전환 속도가 빠르고 사용자 경험이 좋다."
  },
  {
    "id": 24,
    "term": "SSR",
    "category": "frontend",
    "description": "SSR(Server Side Rendering)은 서버에서 HTML을 렌더링해 클라이언트에 전달하는 방식이다. 초기 로딩 속도가 빠르고 SEO에 유리하다."
  },
  {
    "id": 25,
    "term": "Graph Database",
    "category": "database",
    "description": "그래프 데이터베이스는 노드와 엣지 구조로 데이터를 저장하여 관계를 효율적으로 표현하는 데이터베이스다. 소셜 네트워크나 추천 시스템에 자주 사용된다."
  },
  {
    "id": 26,
    "term": "Index",
    "category": "database",
    "description": "인덱스는 데이터베이스에서 검색 속도를 높이기 위해 사용하는 자료구조다. 특정 컬럼에 인덱스를 설정하면 조회 성능이 향상된다."
  },
  {
    "id": 27,
    "term": "ORM",
    "category": "backend",
    "description": "ORM(Object Relational Mapping)은 객체 지향 언어의 객체와 관계형 데이터베이스의 테이블을 매핑해주는 기술이다. SQL 작성 없이 데이터 조작이 가능하다."
  },
  {
    "id": 28,
    "term": "WebSocket",
    "category": "network",
    "description": "WebSocket은 서버와 클라이언트 간의 양방향 통신을 위한 프로토콜이다. 실시간 채팅, 알림 등 빠른 데이터 교환이 필요한 서비스에서 사용된다."
  },
  {
    "id": 29,
    "term": "Proxy Server",
    "category": "network",
    "description": "프록시 서버는 클라이언트와 서버 사이에서 중개 역할을 하는 서버다. 캐싱, 로드 밸런싱, 보안 강화 등의 목적으로 사용된다."
  },
  {
    "id": 30,
    "term": "SSL/TLS",
    "category": "security",
    "description": "SSL/TLS는 인터넷 통신을 암호화하여 데이터 도청이나 변조를 방지하는 보안 프로토콜이다. HTTPS는 TLS 위에서 동작한다."
  },
  {
    "id": 31,
    "term": "Hashing",
    "category": "security",
    "description": "해싱은 입력값을 고정된 길이의 해시값으로 변환하는 기술이다. 비밀번호 저장이나 데이터 무결성 검사 등에 사용된다."
  },
  {
    "id": 32,
    "term": "Kubernetes",
    "category": "devops",
    "description": "Kubernetes는 컨테이너화된 애플리케이션을 자동으로 배포, 확장, 관리하는 오케스트레이션 도구이다. 대규모 서비스 운영에 필수적이다."
  },
  {
    "id": 33,
    "term": "Infrastructure as Code",
    "category": "devops",
    "description": "IaC(Infrastructure as Code)는 인프라를 코드로 관리하는 방식이다. 서버 설정, 네트워크 구성을 자동화하고 재현성을 높인다."
  },
  {
    "id": 34,
    "term": "Webhook",
    "category": "backend",
    "description": "Webhook은 특정 이벤트가 발생했을 때 지정된 URL로 데이터를 자동 전송하는 방식이다. 실시간 알림이나 외부 서비스 연동에 활용된다."
  },
  {
    "id": 35,
    "term": "CSR",
    "category": "frontend",
    "description": "CSR(Client Side Rendering)은 브라우저에서 자바스크립트를 사용해 콘텐츠를 렌더링하는 방식이다. 사용자 인터랙션이 많은 웹 앱에서 자주 사용된다."
  },
  {
    "id": 36,
    "term": "Event Loop",
    "category": "backend",
    "description": "이벤트 루프는 자바스크립트의 비동기 처리 메커니즘으로, 호출 스택과 태스크 큐를 관리하여 논블로킹 동작을 가능하게 한다."
  },
  {
    "id": 37,
    "term": "Pipeline",
    "category": "devops",
    "description": "파이프라인은 코드 빌드, 테스트, 배포 과정을 자동화한 워크플로우다. CI/CD 구현의 핵심 구성 요소다."
  },
  {
    "id": 38,
    "term": "Message Queue",
    "category": "architecture",
    "description": "메시지 큐는 비동기 통신을 위해 메시지를 임시 저장하고 전달하는 시스템이다. 마이크로서비스 간 데이터 전송에 자주 사용된다."
  },
  {
    "id": 39,
    "term": "Serverless",
    "category": "architecture",
    "description": "서버리스는 서버를 직접 관리하지 않고 클라우드에서 자동으로 실행되는 함수 단위의 컴퓨팅 모델이다. 사용한 만큼만 비용을 지불한다."
  },
  {
    "id": 40,
    "term": "CDN",
    "category": "network",
    "description": "CDN(Content Delivery Network)은 전 세계에 분산된 서버를 통해 콘텐츠를 빠르게 전달하는 네트워크다. 웹사이트 속도와 안정성을 개선한다."
  },
  {
    "id": 41,
    "term": "gRPC",
    "category": "backend",
    "description": "gRPC는 구글에서 개발한 고성능 원격 프로시저 호출(RPC) 프레임워크다. HTTP/2를 기반으로 하며, 프로토콜 버퍼를 사용해 빠르고 효율적인 통신이 가능하다."
  },
  {
    "id": 42,
    "term": "CQRS",
    "category": "architecture",
    "description": "CQRS(Command Query Responsibility Segregation)는 읽기 작업과 쓰기 작업을 분리하는 아키텍처 패턴이다. 복잡한 비즈니스 로직에서 성능과 확장성을 높일 수 있다."
  },
  {
    "id": 43,
    "term": "Event Sourcing",
    "category": "architecture",
    "description": "Event Sourcing은 상태를 직접 저장하지 않고 발생한 이벤트 자체를 저장하여 시스템 상태를 재구성하는 패턴이다. 변경 이력을 추적하거나 롤백이 필요한 시스템에 유용하다."
  },
  {
    "id": 44,
    "term": "Reverse Proxy",
    "category": "network",
    "description": "리버스 프록시는 클라이언트 대신 서버에 요청을 전달하고 응답을 반환하는 서버다. 로드 밸런싱, 보안, 캐싱에 활용된다."
  },
  {
    "id": 45,
    "term": "API Gateway",
    "category": "backend",
    "description": "API Gateway는 클라이언트와 여러 마이크로서비스 간의 중간 계층 역할을 한다. 요청 라우팅, 인증, 로깅, 속도 제한 등을 처리한다."
  },
  {
    "id": 46,
    "term": "Monolith",
    "category": "architecture",
    "description": "모놀리식 아키텍처는 모든 기능이 하나의 애플리케이션 안에서 동작하는 구조다. 초기 개발이 단순하지만 유지보수나 확장성 면에서는 제약이 있다."
  },
  {
    "id": 47,
    "term": "Zero Downtime Deployment",
    "category": "devops",
    "description": "무중단 배포는 애플리케이션을 중단하지 않고 새로운 버전을 배포하는 방법이다. 서비스 연속성을 유지하기 위해 블루-그린, 롤링 업데이트 전략 등이 사용된다."
  },
  {
    "id": 48,
    "term": "Blue-Green Deployment",
    "category": "devops",
    "description": "블루-그린 배포는 두 개의 환경(블루, 그린)을 유지하며 새로운 버전을 한쪽에 배포한 뒤 트래픽을 전환하는 전략이다. 빠른 롤백과 무중단 배포가 가능하다."
  },
  {
    "id": 49,
    "term": "Canary Release",
    "category": "devops",
    "description": "카나리 배포는 일부 사용자에게만 새로운 버전을 먼저 배포해 문제 여부를 확인한 후 전체로 확장하는 전략이다. 리스크를 줄일 수 있다."
  },
  {
    "id": 50,
    "term": "Elastic Scaling",
    "category": "architecture",
    "description": "탄력적 확장은 시스템 부하에 따라 자원을 자동으로 늘리거나 줄이는 기능이다. 클라우드 환경에서 비용 효율성을 높이는 핵심 기술이다."
  },
  {
    "id": 51,
    "term": "Webhook Listener",
    "category": "backend",
    "description": "웹훅 리스너는 외부 서비스에서 전송하는 웹훅 요청을 수신하고 처리하는 서버 엔드포인트다. 실시간 이벤트 처리나 자동화에 사용된다."
  },
  {
    "id": 52,
    "term": "Data Lake",
    "category": "database",
    "description": "데이터 레이크는 구조화·비구조화 데이터를 원시 상태로 저장하는 대규모 저장소다. 빅데이터 분석과 머신러닝에 활용된다."
  },
  {
    "id": 53,
    "term": "Sharding",
    "category": "database",
    "description": "샤딩은 대규모 데이터를 여러 데이터베이스 서버에 분할 저장하는 기술이다. 수평 확장을 통해 성능과 처리량을 향상시킬 수 있다."
  },
  {
    "id": 54,
    "term": "Rate Limiting",
    "category": "security",
    "description": "레이트 리미팅은 클라이언트의 요청 빈도를 제한하여 서버 과부하나 DDoS 공격을 방지하는 기법이다."
  },
  {
    "id": 55,
    "term": "HMAC",
    "category": "security",
    "description": "HMAC(Hash-based Message Authentication Code)는 해시 함수와 비밀 키를 이용해 메시지 무결성과 인증을 보장하는 방식이다."
  },
  {
    "id": 56,
    "term": "Edge Computing",
    "category": "architecture",
    "description": "엣지 컴퓨팅은 데이터를 중앙 서버가 아닌 데이터 발생 지점 가까이에서 처리하는 방식이다. 지연 시간을 줄이고 실시간 처리를 가능하게 한다."
  },
  {
    "id": 57,
    "term": "API Throttling",
    "category": "backend",
    "description": "API 스로틀링은 일정 시간 동안 허용되는 요청 수를 제한하여 서버 자원을 보호하고 안정성을 유지하는 기술이다."
  },
  {
    "id": 58,
    "term": "Distributed System",
    "category": "architecture",
    "description": "분산 시스템은 여러 독립적인 컴퓨터가 하나의 시스템처럼 동작하도록 구성된 환경이다. 확장성과 내결함성을 높일 수 있다."
  },
  {
    "id": 59,
    "term": "Idempotent",
    "category": "backend",
    "description": "멱등성은 같은 요청을 여러 번 보내도 결과가 변하지 않는 특성이다. HTTP PUT, DELETE 메서드 등이 대표적이다."
  },
  {
    "id": 60,
    "term": "Rollback",
    "category": "database",
    "description": "롤백은 트랜잭션 도중 오류가 발생했을 때 이전 상태로 되돌리는 기능이다. 데이터 일관성과 무결성을 유지한다."
  }
]
